// Code generated by mockery v2.14.1. DO NOT EDIT.

package notification

import mock "github.com/stretchr/testify/mock"

// Service is an autogenerated mock type for the Service type
type ServiceMock struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceMock) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// SendPushNotification provides a mock function with given fields: tenantId, message, category
func (_m *ServiceMock) SendPushNotification(tenantId string, message string, category string) error {
	ret := _m.Called(tenantId, message, category)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(tenantId, message, category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_SendPushNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPushNotification'
type Service_SendPushNotification_Call struct {
	*mock.Call
}

// SendPushNotification is a helper method to define mock.On call
//  - tenantId string
//  - message string
//  - category string
func (_e *Service_Expecter) SendPushNotification(tenantId interface{}, message interface{}, category interface{}) *Service_SendPushNotification_Call {
	return &Service_SendPushNotification_Call{Call: _e.mock.On("SendPushNotification", tenantId, message, category)}
}

func (_c *Service_SendPushNotification_Call) Run(run func(tenantId string, message string, category string)) *Service_SendPushNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Service_SendPushNotification_Call) Return(_a0 error) *Service_SendPushNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServiceMock(t mockConstructorTestingTNewService) *ServiceMock {
	mock := &ServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
