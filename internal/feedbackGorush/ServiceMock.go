// Code generated by mockery v2.14.1. DO NOT EDIT.

package feedbackGorush

import (
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type ServiceMock struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceMock) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// DeleteExpiredToken provides a mock function with given fields: errorLog
func (_m *ServiceMock) DeleteExpiredToken(errorLog ErrorLog) error {
	ret := _m.Called(errorLog)

	var r0 error
	if rf, ok := ret.Get(0).(func(ErrorLog) error); ok {
		r0 = rf(errorLog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_DeleteExpiredToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpiredToken'
type Service_DeleteExpiredToken_Call struct {
	*mock.Call
}

// DeleteExpiredToken is a helper method to define mock.On call
//  - errorLog feedbackGorush.ErrorLog
func (_e *Service_Expecter) DeleteExpiredToken(errorLog interface{}) *Service_DeleteExpiredToken_Call {
	return &Service_DeleteExpiredToken_Call{Call: _e.mock.On("DeleteExpiredToken", errorLog)}
}

func (_c *Service_DeleteExpiredToken_Call) Run(run func(errorLog ErrorLog)) *Service_DeleteExpiredToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ErrorLog))
	})
	return _c
}

func (_c *Service_DeleteExpiredToken_Call) Return(_a0 error) *Service_DeleteExpiredToken_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServiceMock(t mockConstructorTestingTNewService) *ServiceMock {
	mock := &ServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
