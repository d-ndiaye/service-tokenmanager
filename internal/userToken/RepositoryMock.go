// Code generated by mockery v2.14.1. DO NOT EDIT.

package userToken

import (
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type RepositoryMock struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryMock) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: deviceToken
func (_m *RepositoryMock) Delete(deviceToken string) error {
	ret := _m.Called(deviceToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(deviceToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - deviceToken string
func (_e *Repository_Expecter) Delete(deviceToken interface{}) *Repository_Delete_Call {
	return &Repository_Delete_Call{Call: _e.mock.On("Delete", deviceToken)}
}

func (_c *Repository_Delete_Call) Run(run func(deviceToken string)) *Repository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_Delete_Call) Return(_a0 error) *Repository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// FindByUsername provides a mock function with given fields: username
func (_m *RepositoryMock) FindByUsername(username string) (UserToken, error) {
	ret := _m.Called(username)

	var r0 UserToken
	if rf, ok := ret.Get(0).(func(string) UserToken); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(UserToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_FindByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUsername'
type Repository_FindByUsername_Call struct {
	*mock.Call
}

// FindByUsername is a helper method to define mock.On call
//  - username string
func (_e *Repository_Expecter) FindByUsername(username interface{}) *Repository_FindByUsername_Call {
	return &Repository_FindByUsername_Call{Call: _e.mock.On("FindByUsername", username)}
}

func (_c *Repository_FindByUsername_Call) Run(run func(username string)) *Repository_FindByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_FindByUsername_Call) Return(_a0 UserToken, _a1 error) *Repository_FindByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetByTenantAndCategory provides a mock function with given fields: tenantId, category
func (_m *RepositoryMock) GetByTenantAndCategory(tenantId string, category string) ([]UserToken, error) {
	ret := _m.Called(tenantId, category)

	var r0 []UserToken
	if rf, ok := ret.Get(0).(func(string, string) []UserToken); ok {
		r0 = rf(tenantId, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]UserToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tenantId, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetByTenantAndCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTenantAndCategory'
type Repository_GetByTenantAndCategory_Call struct {
	*mock.Call
}

// GetByTenantAndCategory is a helper method to define mock.On call
//  - tenantId string
//  - category string
func (_e *Repository_Expecter) GetByTenantAndCategory(tenantId interface{}, category interface{}) *Repository_GetByTenantAndCategory_Call {
	return &Repository_GetByTenantAndCategory_Call{Call: _e.mock.On("GetByTenantAndCategory", tenantId, category)}
}

func (_c *Repository_GetByTenantAndCategory_Call) Run(run func(tenantId string, category string)) *Repository_GetByTenantAndCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetByTenantAndCategory_Call) Return(_a0 []UserToken, _a1 error) *Repository_GetByTenantAndCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Ping provides a mock function with given fields:
func (_m *RepositoryMock) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type Repository_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *Repository_Expecter) Ping() *Repository_Ping_Call {
	return &Repository_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *Repository_Ping_Call) Run(run func()) *Repository_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_Ping_Call) Return(_a0 error) *Repository_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

// Save provides a mock function with given fields: _a0
func (_m *RepositoryMock) Save(_a0 UserToken) (UserToken, error) {
	ret := _m.Called(_a0)

	var r0 UserToken
	if rf, ok := ret.Get(0).(func(UserToken) UserToken); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(UserToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(UserToken) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Repository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//  - _a0 userToken.UserToken
func (_e *Repository_Expecter) Save(_a0 interface{}) *Repository_Save_Call {
	return &Repository_Save_Call{Call: _e.mock.On("Save", _a0)}
}

func (_c *Repository_Save_Call) Run(run func(_a0 UserToken)) *Repository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(UserToken))
	})
	return _c
}

func (_c *Repository_Save_Call) Return(_a0 UserToken, _a1 error) *Repository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryMock(t mockConstructorTestingTNewRepository) *RepositoryMock {
	mock := &RepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
